/*****     Data Analysis     *****/


Q1. -- Which product has the highest price? Only return a single row.

SELECT PRODUCT_NAME,PRICE
FROM PRODUCTS
WHERE PRICE =
		(SELECT MAX(PRICE)
			FROM PRODUCTS);
			

Q2. -- Which customer has made the most orders.

SELECT CUSTOMERS.CUSTOMER_ID,FIRST_NAME,
	COUNT(ORDERS.CUSTOMER_ID) AS NO_OF_ORDERS
FROM CUSTOMERS
JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
GROUP BY CUSTOMERS.CUSTOMER_ID
ORDER BY CUSTOMER_ID
LIMIT 1;


Q3. -- Whatâ€™s the total revenue per product.

SELECT PRODUCT_NAME,
	SUM(PRICE * QUANTITY) AS REVENUE
FROM PRODUCTS
JOIN ORDER_ITEMS ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
GROUP BY PRODUCT_NAME
ORDER BY PRODUCT_NAME;


Q4. -- Find the day with the highest revenue.

SELECT EXTRACT(DAY
	FROM ORDER_DATE) AS DAY,
	SUM(PRICE * QUANTITY) AS REVENUE
FROM PRODUCTS
JOIN ORDER_ITEMS ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
JOIN ORDERS ON ORDER_ITEMS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY ORDER_DATE
ORDER BY REVENUE DESC;


Q5. -- Find the first order (by date) for each customer.

SELECT CUSTOMER_ID,
	ORDER_DATE,
	FIRST_VALUE(ORDER_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS FIRST_ORDERED_DATE
FROM ORDERS;


Q6. -- Find the top 3 customers who have ordered the most distinct products.

WITH CTE AS
	(SELECT DISTINCT PRODUCT_NAME,
			CUSTOMER_ID,
			COUNT(PRODUCT_NAME) OVER (PARTITION BY PRODUCT_NAME
			ORDER BY CUSTOMER_ID) AS UNIQUE_PRODUCT_ORDERED_COUNT
		FROM ORDERS
		FULL JOIN ORDER_ITEMS ON ORDERS.ORDER_ID = ORDER_ITEMS.ORDER_ID
		FULL JOIN PRODUCTS ON ORDER_ITEMS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
		LIMIT 3)
SELECT CUSTOMER_ID,
	UNIQUE_PRODUCT_ORDERED_COUNT FROM CTE
ORDER BY UNIQUE_PRODUCT_ORDERED_COUNT DESC ;


-- Q7. Which product has been bought the least in terms of quantity.

SELECT DISTINCT(PRODUCT_NAME),
	QUANTITY AS LEAST_QUANTITY_OF_PRODUCT
FROM PRODUCTS
JOIN ORDER_ITEMS ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID
WHERE QUANTITY =
		(SELECT MIN(QUANTITY)
			FROM ORDER_ITEMS);


Q8. -- What is the median order total.

WITH CTE AS
	(SELECT PRICE,
			QUANTITY,
			(PRICE * QUANTITY) AS TOTAL
		FROM PRODUCTS
		JOIN ORDER_ITEMS ON PRODUCTS.PRODUCT_ID = ORDER_ITEMS.PRODUCT_ID)
SELECT AVG(TOTAL)
FROM CTE; 


Q9. /* For each order, determine if it was 'Expensive' (total over 300),
       'Affordable' (total over 100), or 'Cheap'. */

WITH CTE AS
	(SELECT ORDER_ID,
			PRICE,
			QUANTITY,
			SUM (QUANTITY * PRICE) OVER (PARTITION BY ORDER_ID) AS TOTAL
		FROM ORDER_ITEMS
		FULL JOIN PRODUCTS ON ORDER_ITEMS.PRODUCT_ID = PRODUCTS.PRODUCT_ID)
SELECT DISTINCT ORDER_ID,TOTAL,
	CASE
		WHEN TOTAL > 300 THEN 'expensive'
		WHEN TOTAL > 100 THEN 'affordable'
		ELSE 'cheap'
	END AS Purchase_status
FROM CTE
ORDER BY ORDER_ID;


Q10. -- Find customers who have ordered the product with the highest price.

SELECT CUSTOMERS.CUSTOMER_ID,
	FIRST_NAME,
	LAST_NAME,
	PRODUCTS.PRODUCT_NAME,
	PRICE
FROM CUSTOMERS
JOIN ORDERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
JOIN ORDER_ITEMS ON ORDERS.ORDER_ID = ORDER_ITEMS.ORDER_ID
JOIN PRODUCTS ON ORDER_ITEMS.PRODUCT_ID = PRODUCTS.PRODUCT_ID
ORDER BY PRICE DESC
LIMIT 2;